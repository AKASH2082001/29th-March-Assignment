<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="6" tests="21" time="0.281" timestamp="2022-03-30T11:12:01.287102" hostname="DESKTOP-TP7G31N"><testcase classname="test_Programs" name="test_AmstrongorNot[153-True]" time="0.002" /><testcase classname="test_Programs" name="test_AmstrongorNot[370-True]" time="0.002" /><testcase classname="test_Programs" name="test_AmstrongorNot[371-False]" time="0.002"><failure message="assert True == False">a = 371, b = False

    @pytest.mark.parametrize("a,b",[(153,True),(370,True),(371,False),(407,True)])
    
    def test_AmstrongorNot(a,b):
        result = Programs.AmstrongNumber(a)
&gt;       assert result == b
E       assert True == False

test_Programs.py:9: AssertionError</failure></testcase><testcase classname="test_Programs" name="test_AmstrongorNot[407-True]" time="0.002" /><testcase classname="test_Programs" name="test_Divisibleby8[8-True]" time="0.001"><skipped type="pytest.skip" message="no need">C:\Users\Lenovo\PycharmProjects\29th Mar Assignment\test_Programs.py:11: no need</skipped></testcase><testcase classname="test_Programs" name="test_Divisibleby8[10-False]" time="0.001"><skipped type="pytest.skip" message="no need">C:\Users\Lenovo\PycharmProjects\29th Mar Assignment\test_Programs.py:11: no need</skipped></testcase><testcase classname="test_Programs" name="test_Divisibleby8[88-True]" time="0.001"><skipped type="pytest.skip" message="no need">C:\Users\Lenovo\PycharmProjects\29th Mar Assignment\test_Programs.py:11: no need</skipped></testcase><testcase classname="test_Programs" name="test_Divisibleby8[73-True]" time="0.001"><skipped type="pytest.skip" message="no need">C:\Users\Lenovo\PycharmProjects\29th Mar Assignment\test_Programs.py:11: no need</skipped></testcase><testcase classname="test_Programs" name="test_Smallest[2-1-4-1]" time="0.002" /><testcase classname="test_Programs" name="test_Smallest[4-2-5-2]" time="0.002" /><testcase classname="test_Programs" name="test_Smallest[15-10-14-10]" time="0.002" /><testcase classname="test_Programs" name="test_Smallest[12-32-34-10]" time="0.002"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="test_Programs" name="test_Smallest[13-8-6-17]" time="0.002"><skipped type="pytest.xfail" message="" /></testcase><testcase classname="test_Programs" name="test_Evenorodd[12-True]" time="0.002" /><testcase classname="test_Programs" name="test_Evenorodd[15-False]" time="0.002" /><testcase classname="test_Programs" name="test_Evenorodd[14-True]" time="0.001" /><testcase classname="test_Programs" name="test_Palindrome[121-True]" time="0.001" /><testcase classname="test_Programs" name="test_Palindrome[232-True]" time="0.002" /><testcase classname="test_Programs" name="test_Palindrome[1551-True]" time="0.001" /><testcase classname="test_Programs" name="test_Palindrome[120-True]" time="0.002"><failure message="assert False == True">a = '120', b = True

    @pytest.mark.parametrize("a,b",[("121",True),("232",True),("1551",True),("120",True),("221",True)])
    def test_Palindrome(a,b):
        result = Programs.PalindromeorNot(a)
&gt;       assert result == b
E       assert False == True

test_Programs.py:34: AssertionError</failure></testcase><testcase classname="test_Programs" name="test_Palindrome[221-True]" time="0.002"><failure message="assert False == True">a = '221', b = True

    @pytest.mark.parametrize("a,b",[("121",True),("232",True),("1551",True),("120",True),("221",True)])
    def test_Palindrome(a,b):
        result = Programs.PalindromeorNot(a)
&gt;       assert result == b
E       assert False == True

test_Programs.py:34: AssertionError</failure></testcase></testsuite></testsuites>